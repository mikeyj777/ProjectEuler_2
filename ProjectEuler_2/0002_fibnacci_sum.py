import math

# Each new term in the Fibonacci sequence is generated by adding the
# previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do
# not exceed four million, find the sum of the even-valued terms.

# method:

# the following method should reduce the number of computations by a
# factor of 3 below a brute force method.  there must be a more efficient
# way than this.

# fib(n) = (Phi^n - (-phi)^n) / sqrt(5)
# Phi = bigger soln of golden ratio:  (sqrt(5) + 1) / 2
# phi = smaller soln of golden ratio:  (sqrt(5) - 1) / 2

# the ratio of successive fibonacci numbers approaches the golden ratio, ~1.6.
# to estimate which term will be the last below 4,000,000, solve the following
# equation:  1.6^n < 4,000,000 -> n < log(4e6)/log(1.6) <- n < 32.34

# only every 3rd term is even, so sum the 3rd terms of the fibonacci sequence
# up to the 30th term (highest term that's multiple of 3 and less than 32).


def fibonacci(n):
    sqr5 = math.sqrt(5)
    phibig = (sqr5 + 1) / 2
    phismall = (sqr5 - 1) / 2

    return round((math.pow(phibig, n) - math.pow(-phismall, n)) / sqr5)


maxvalue = 4e6
maxn = int(math.log(maxvalue) / math.log(1.6))

n = 0
answer = 0

while n <= maxn:
    answer += fibonacci(n + 3)
    n += 3

print(4613732)
